<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_INJ" Id="{8b858f89-a705-4da6-a8c0-4cd0b412d38f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_INJ
VAR
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:SP '}
	fSetpointValue :FLOAT; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:GO;
	 field: ZNAM STOP; 
	 field: ONAM START; 
	 io: io;
	'}
	bGo: BOOL; 
 	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:RESET;
	 field: ZNAM FALSE; 
	 field: ONAM TRUE; 
	 io: io;
	 '}
	bReset : BOOL; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:ERROR;
    field: ZNAM FALSE; 
	 field: ONAM TRUE; 
	 io: io;
	 '}
	bError : BOOL; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Kp1 '}
	fKp1 : REAL:= 1; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Tn1 '}
	fTn1 : REAL:= 0.5; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Kp2 '}
	fKp2 : REAL:= 0.01; 
	{attribute 'pytmc' :=' pv: AT1K0:GATT:CNTRL:Tn2 '}
	fTn2 : REAL:= 0.5; 
	arrTable	: ARRAY[1..15,1..2] OF FLOAT;
	fManValue											: FLOAT;
	bExtrapolate										: BOOL;
	eMode							: E_CTRL_MODE;
	stCTRL_PID_PARAMS		: ST_CTRL_PID_PARAMS;
	bSync							: BOOL;
	bHold							: BOOL;
	eErrorId						: E_CTRL_ERRORCODES;
	bARWactive					: BOOL;
	(* controller *)
	fbCTRL_PID					: FB_CTRL_PID;
	bInit							: BOOL	:= TRUE;
	fbCTRL_LIN_INTERPOLATION					: FB_CTRL_LIN_INTERPOLATION;
	//stCTRL_LIN_INTERPOLATION_PARAMS		: ST_CTRL_LIN_INTERPOLATION_PARAMS;
	stCTRL_LIN_INTERPOLATION_PARAMS	: ST_CTRL_LIN_INTERPOLATION_PARAMS;
	fbCTRL_DEADBAND						: FB_CTRL_DEADBAND;
	stCTRL_DEADBAND_PARAMS			: ST_CTRL_DEADBAND_PARAMS;

	pid_on :TON;
	wait : time := T#10S;
	FTrig: F_TRIG;
		

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Valves
VCN_70(i_xExtIlkOK := (US_MAA_OK AND US_Turbo_Valves_Open AND US_Turbo_Running)
						AND (DS_MAA_OK AND DS_Turbo_Valves_Open AND DS_Turbo_Running), 
						i_ReqPos:= LREAL_TO_REAL(fbCTRL_LIN_INTERPOLATION.fOut + fbCTRL_PID.fOut));

//VGP_80
VVC_71(i_xExtILK_OK:= VVC_72.M_IsClosed() AND ((US_MAA_OK AND (*US_Roughing_Valves_Open AND*) US_Turbo_Valves_Open AND US_Turbo_Running) 
						AND (DS_MAA_OK AND (*DS_Roughing_Valves_Open AND*) DS_Turbo_Valves_Open AND DS_Turbo_Running)), i_xOverrideMode:= , iq_stValve=> );
VVC_72(i_xExtILK_OK:= VVC_71.M_IsClosed() AND ((US_MAA_OK AND (*US_Roughing_Valves_Open AND US_Turbo_Valves_Open AND *)US_Turbo_Running) 
						AND (DS_MAA_OK AND (*DS_Roughing_Valves_Open AND DS_Turbo_Valves_Open AND*) DS_Turbo_Running)), i_xOverrideMode:= , iq_stValve=> );

//Gauges
GCM_70(PG=> , i_rFULL_SCALE:= 2000);
GCM_80(PG=> , i_rFULL_SCALE:= 20);
GCM_81(PG=> , i_rFULL_SCALE:= 0.25);
(*Assign reading to psuedo gauge*)
IF (GCM_81.PG.rPRESS >=0.22) THEN GCM_82 := GCM_80.PG;
	ELSE
	GCM_82 := GCM_81.PG;	
END_IF
// Set ADC bits for EL3174-0002
GCM_70.M_SetBits(30518);
GCM_80.M_SetBits(30518);
GCM_81.M_SetBits(30518);


//
(*Iniitialization*)
IF bInit
THEN
	(* init array with the interpolation points  *)
	(* 	fIn					 |		fOut		*)
	arrTable[1,1] := 0;		arrTable[1,2] := 0;
	arrTable[2,1] := 0.001;		arrTable[2,2] := 20;
	arrTable[3,1] := 0.01024;		arrTable[3,2] := 30;
	arrTable[4,1] :=  0.021;	    arrTable[4,2] := 40;
	arrTable[5,1] :=  0.12;	    arrTable[5,2] := 50;
	arrTable[6,1] := 0.8;		arrTable[6,2] := 60;
	arrTable[7,1] := 2.1;		arrTable[7,2] := 65;
	arrTable[8,1] := 2.8;		arrTable[6,2] := 69;
	arrTable[9,1] := 3.1;		arrTable[7,2] := 70;
	arrTable[10,1] := 5.4;		arrTable[6,2] := 77;
	arrTable[11,1] := 6.3;	    arrTable[8,2] := 78;
	arrTable[12,1] :=7.5;	    arrTable[9,2] := 80;
	arrTable[13,1] :=8.2;	    arrTable[9,2] := 82;
	arrTable[14,1] :=8.6;	    arrTable[9,2] := 84;
	arrTable[15,1] :=9.5;	    arrTable[9,2] := 86;

	(* init parameter struct *)
	stCTRL_LIN_INTERPOLATION_PARAMS.tCtrlCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.tTaskCycleTime					:= T#10ms;
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_NumberOfRows		:= INT_TO_UINT(15);	

	(*FBCNTRL*)
	(* init parameter struct *)
	stCTRL_PID_PARAMS.tCtrlCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.tTaskCycleTime		:= T#10ms;
	stCTRL_PID_PARAMS.fKp					:= fKp1;			(* proportional gain Kp				*)
	stCTRL_PID_PARAMS.tTn					:= T#500ms;		(*  Tn									*)
	stCTRL_PID_PARAMS.tTv					:= T#200ms;	(*  Tv									*)
	stCTRL_PID_PARAMS.tTd					:= T#100ms;	(*  Td									*)
	stCTRL_PID_PARAMS.fOutMaxLimit			:=  20;			(* maximum output limit				*)
	stCTRL_PID_PARAMS.fOutMinLimit			:=  -100;			(* minimum output limit				*)

	(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE   ;					
	(* reset the init flag *)
	bInit							:= FALSE;
END_IF
(* set the addresses *)
	stCTRL_LIN_INTERPOLATION_PARAMS.pDataTable_ADR			:= ADR(arrTable);
	stCTRL_LIN_INTERPOLATION_PARAMS.nDataTable_SIZEOF		:= SIZEOF(arrTable);
	
if (bGo) THEN
	IF (bReset) THEN
	(* set the mode to RESET*)
	eMode							:= eCTRL_MODE_RESET   ;
	VCN_70.M_ValveControl(CloseValve);
	//bReset := False;
	ELSE
		(* set the mode to ACTIVE --> normal operation *)
	eMode							:= eCTRL_MODE_ACTIVE   ;
 	VCN_70.M_ValveControl(PressureControl);
	END_IF
END_IF
If(FTrig.Q)THEN
		eMode							:= eCTRL_MODE_PASSIVE;
		VCN_70.M_ValveControl(CloseValve);
		fSetpointValue :=0;
END_IF


fbCTRL_LIN_INTERPOLATION(
	fIn:= fSetpointValue , 
	fManValue:= fManValue , 
	bExtrapolate:= bExtrapolate, 
	eMode:= eMode, 
	stParams:= stCTRL_LIN_INTERPOLATION_PARAMS,
	fOut=> , 
	bInIsGreaterThanMaxElement=> , 
	bInIsLessThanMinElement=> , 
	eState=> , 
	eErrorId=> , 
	bError=> );


(* Gauge selection *)
IF (fSetpointValue >=0.22) THEN
	fbCTRL_PID.fActualValue := GCM_80.PG.rPRESS;
ELSE
	fbCTRL_PID.fActualValue := GCM_81.PG.rPRESS;
END_IF

(* call controller *)
fbCTRL_PID(		fSetpointValue		:= fSetpointValue,
					fActualValue		:= ,
					fManSyncValue	:= ,
					bSync				:= bSync,
					eMode				:= eMode,
					bHold				:= bHold,
					stParams			:= stCTRL_PID_PARAMS,
					fOut				=> ,
					bARWactive		=> bARWactive,
					eErrorId			=> eErrorId,
					bError				=> 
				);

	
(*deadband/clipper *)

(* call function block *)
stCTRL_DEADBAND_PARAMS.fThreshold	:=  fSetpointValue*0.0016 ;
(*fbCTRL_DEADBAND	(	fIn					:= ,
					stParams			:= stCTRL_DEADBAND_PARAMS,
					bInIsUnderThreshold => ,
					eErrorId			=> ,
					bError				=> 
				);*)

bError := fbCTRL_PID.bError OR fbCTRL_LIN_INTERPOLATION.bError;
				

	

// or NOT???

//stCTRL_PID_PARAMS.bDInTheFeedbackPath := fbCTRL_DEADBAND.bInIsUnderThreshold;


//timer
(*pid_on(IN:=, PT:= wait, Q=>, ET =>);
IF (pid_on.Q) THEN eMode:= eCTRL_MODE_ACTIVE; pid_on.IN := FALSE; END_IF; //eCTRL_MODE_TUNE????*)


FTRIG(CLK := bGo);

]]></ST>
    </Implementation>
    <LineIds Name="PRG_INJ">
      <LineId Id="3" Count="7" />
      <LineId Id="228" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="12" Count="27" />
      <LineId Id="285" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="288" Count="2" />
      <LineId Id="64" Count="108" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>